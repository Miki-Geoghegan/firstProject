
    function playRound(playedCard) {
      if (TopTrumpsGame.pickedCards.length < 2) {
        playedCard.classList.toggle('turned');
        TopTrumpsGame.pickedCards.push(playedCard);
      } else {
        console.log(`You cannot pick more than two cards`);
      }
    }
  
    function freezeCards() {
      TopTrumpsGame.pickedCards.forEach(
        (card) => (card.style.pointerEvents = 'none')
      );
    }
  
    function flipCards() {
      TopTrumpsGame.pickedCards.forEach((card) => card.classList.toggle('turned'));
    }
  
    function updateScoreDOM(winOrLose) {
      const currentScore = document.querySelector('#total-score')
      if (winOrLose === 'win') {
        TopTrumpsGame.score += 10;
      } else if (winOrLose === 'lose') {
        TopTrumpsGame.score -= 1;
      }
        currentScore.innerHTML = TopTrumpsGame.score;
      // Code to update score board
      // look onto the TopTrumpsGame object for values
    }
  
    // Bind the click event of each element to a function
    document.querySelectorAll('.card').forEach((card) => {
      card.addEventListener('click', (event) => {
        // TODO: write some code here
        console.log(`Card clicked: ${card}`);
        playRound(event.currentTarget);
        if (TopTrumpsGame.pickedCards.length === 2) {
          const card1 = TopTrumpsGame.pickedCards[0].getAttribute('name');
          const card2 = TopTrumpsGame.pickedCards[1].getAttribute('name');
          const pairGuessed = TopTrumpsGame.checkIfPair(card1, card2);
          if (pairGuessed) {
            freezeCards();
            TopTrumpsGame.resetClickedPair();
            updateScoreDOM('win');
          } else {
            setTimeout(() => {
              flipCards();
              TopTrumpsGame.resetClickedPair();
              updateScoreDOM('lose');
            }, 1000);
          }
        }
      });
    });
  });
  
  //if the class name contains turned, remove it and if it doesn't then add it



  /*

  
  
  
  
      let currentIndex = cardsArray.length, randomIndex;
      if (cardsArray) {
        return undefined;
      } else {
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex--;
  
        [cardsArray[currentIndex]], cardsArray[randomIndex] = [
          array[randomIndex], array[currentIndex]];
      }
      return cardsArray
    }
  
  
      shuffleCards(argument1) {
      shuffledCards = eachCard.sort((a, b) => Math.random() - 0.5);
      return shuffledCards;
    }
  
    
      shuffleCards(argument1) {
        for (let i = this.cards.length -1; i > 0; i--) {
          const j = Math.floor(Math.random()*(i + 1));
          [this.cards[i], this.cards[j]] = [this.cards[j], this.cards[i]];
        }
      }
    
  
        shuffleCards(argument1) {
      if (!argument1) {
        return undefined
      } else {
        let newArray = this.cards;
        for (let i = this.cards.length-1; i>0; i--) {
          let shuffledCards = Math.floor(Math.random()*(i+1))
          let randomCard = newArray[shuffledCards];
          newArray[shuffledCards] = newArray[i];
          newArray[i] = randomCard;
      }
      return newArray;
      }
    }
  
    */
  
    checkIfPair(card1, card2) {
      this.pairsClicked++;
      if (card1 === card2) {
        this.pairsGuessed++;
        this.checkIfFinished();
        return true;
      } else {
        return false;
      }
    }
  
    resetClickedPair() {
      this.pickedCards = [];
    }
  
  
    checkIfFinished() {
      let correctPairs = this.pairsGuessed;
      if (correctPairs < this.cards.length / 2) {
        return false;
      } else {
        return true;
      }
    }
  }


    function changeColor() {
    document.getElementsByTagName('li').style.color = 'purple';
    return false;
}  

  document.getElementById('player-cards').onclick = changeColor();